//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  home: Home;
  homeConnection: HomeConnection;
  page: Page;
  pageConnection: PageConnection;
  post: Post;
  postConnection: PostConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryHomeArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryHomeConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<HomeFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PostFilter>;
};

export type DocumentFilter = {
  home?: InputMaybe<HomeFilter>;
  page?: InputMaybe<PageFilter>;
  post?: InputMaybe<PostFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Home | Page | Post;

export type HomeBlocksHero = {
  __typename?: 'HomeBlocksHero';
  tagline?: Maybe<Scalars['String']>;
  headline?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  alt_text?: Maybe<Scalars['String']>;
  btn_label?: Maybe<Scalars['String']>;
  btn_link?: Maybe<Scalars['String']>;
};

export type HomeBlocksImageText50 = {
  __typename?: 'HomeBlocksImageText50';
  template?: Maybe<Scalars['String']>;
  custom?: Maybe<Scalars['String']>;
  tagline?: Maybe<Scalars['String']>;
  headline?: Maybe<Scalars['String']>;
  headline_class?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  btn_label?: Maybe<Scalars['String']>;
  btn_link?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  image_alt?: Maybe<Scalars['String']>;
};

export type HomeBlocksFeaturesItems = {
  __typename?: 'HomeBlocksFeaturesItems';
  title?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  image_alt?: Maybe<Scalars['String']>;
  btn_link?: Maybe<Scalars['String']>;
  btn_label?: Maybe<Scalars['String']>;
};

export type HomeBlocksFeatures = {
  __typename?: 'HomeBlocksFeatures';
  items?: Maybe<Array<Maybe<HomeBlocksFeaturesItems>>>;
  layout?: Maybe<Scalars['String']>;
};

export type HomeBlocksGridGroupsItems = {
  __typename?: 'HomeBlocksGridGroupsItems';
  title?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  features?: Maybe<Array<Maybe<Scalars['String']>>>;
  image?: Maybe<Scalars['String']>;
  image_alt?: Maybe<Scalars['String']>;
  btn_link?: Maybe<Scalars['String']>;
  btn_label?: Maybe<Scalars['String']>;
};

export type HomeBlocksGridGroups = {
  __typename?: 'HomeBlocksGridGroups';
  label?: Maybe<Scalars['String']>;
  items?: Maybe<Array<Maybe<HomeBlocksGridGroupsItems>>>;
};

export type HomeBlocksGrid = {
  __typename?: 'HomeBlocksGrid';
  groups?: Maybe<Array<Maybe<HomeBlocksGridGroups>>>;
  layout?: Maybe<Scalars['String']>;
};

export type HomeBlocksSpacingSwitch = {
  __typename?: 'HomeBlocksSpacingSwitch';
  text?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  alt_text?: Maybe<Scalars['String']>;
};

export type HomeBlocksSymmetrySwitch = {
  __typename?: 'HomeBlocksSymmetrySwitch';
  image?: Maybe<Scalars['String']>;
  alt_text?: Maybe<Scalars['String']>;
};

export type HomeBlocks = HomeBlocksHero | HomeBlocksImageText50 | HomeBlocksFeatures | HomeBlocksGrid | HomeBlocksSpacingSwitch | HomeBlocksSymmetrySwitch;

export type Home = Node & Document & {
  __typename?: 'Home';
  blocks?: Maybe<Array<Maybe<HomeBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type HomeBlocksHeroFilter = {
  tagline?: InputMaybe<StringFilter>;
  headline?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  alt_text?: InputMaybe<StringFilter>;
  btn_label?: InputMaybe<StringFilter>;
  btn_link?: InputMaybe<StringFilter>;
};

export type HomeBlocksImageText50Filter = {
  template?: InputMaybe<StringFilter>;
  custom?: InputMaybe<StringFilter>;
  tagline?: InputMaybe<StringFilter>;
  headline?: InputMaybe<StringFilter>;
  headline_class?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  btn_label?: InputMaybe<StringFilter>;
  btn_link?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  image_alt?: InputMaybe<StringFilter>;
};

export type HomeBlocksFeaturesItemsFilter = {
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  image_alt?: InputMaybe<StringFilter>;
  btn_link?: InputMaybe<StringFilter>;
  btn_label?: InputMaybe<StringFilter>;
};

export type HomeBlocksFeaturesFilter = {
  items?: InputMaybe<HomeBlocksFeaturesItemsFilter>;
  layout?: InputMaybe<StringFilter>;
};

export type HomeBlocksGridGroupsItemsFilter = {
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  features?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  image_alt?: InputMaybe<StringFilter>;
  btn_link?: InputMaybe<StringFilter>;
  btn_label?: InputMaybe<StringFilter>;
};

export type HomeBlocksGridGroupsFilter = {
  label?: InputMaybe<StringFilter>;
  items?: InputMaybe<HomeBlocksGridGroupsItemsFilter>;
};

export type HomeBlocksGridFilter = {
  groups?: InputMaybe<HomeBlocksGridGroupsFilter>;
  layout?: InputMaybe<StringFilter>;
};

export type HomeBlocksSpacingSwitchFilter = {
  text?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  alt_text?: InputMaybe<StringFilter>;
};

export type HomeBlocksSymmetrySwitchFilter = {
  image?: InputMaybe<ImageFilter>;
  alt_text?: InputMaybe<StringFilter>;
};

export type HomeBlocksFilter = {
  hero?: InputMaybe<HomeBlocksHeroFilter>;
  imageText50?: InputMaybe<HomeBlocksImageText50Filter>;
  features?: InputMaybe<HomeBlocksFeaturesFilter>;
  grid?: InputMaybe<HomeBlocksGridFilter>;
  spacingSwitch?: InputMaybe<HomeBlocksSpacingSwitchFilter>;
  symmetrySwitch?: InputMaybe<HomeBlocksSymmetrySwitchFilter>;
};

export type HomeFilter = {
  blocks?: InputMaybe<HomeBlocksFilter>;
};

export type HomeConnectionEdges = {
  __typename?: 'HomeConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Home>;
};

export type HomeConnection = Connection & {
  __typename?: 'HomeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<HomeConnectionEdges>>>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  hero?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type PageFilter = {
  hero?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title?: Maybe<Scalars['String']>;
  imgSrc?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  imgSrc?: InputMaybe<ImageFilter>;
  body?: InputMaybe<StringFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateHome: Home;
  createHome: Home;
  updatePage: Page;
  createPage: Page;
  updatePost: Post;
  createPost: Post;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateHomeArgs = {
  relativePath: Scalars['String'];
  params: HomeMutation;
};


export type MutationCreateHomeArgs = {
  relativePath: Scalars['String'];
  params: HomeMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String'];
  params: PostMutation;
};

export type DocumentMutation = {
  home?: InputMaybe<HomeMutation>;
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
};

export type HomeBlocksHeroMutation = {
  tagline?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  alt_text?: InputMaybe<Scalars['String']>;
  btn_label?: InputMaybe<Scalars['String']>;
  btn_link?: InputMaybe<Scalars['String']>;
};

export type HomeBlocksImageText50Mutation = {
  template?: InputMaybe<Scalars['String']>;
  custom?: InputMaybe<Scalars['String']>;
  tagline?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  headline_class?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  btn_label?: InputMaybe<Scalars['String']>;
  btn_link?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  image_alt?: InputMaybe<Scalars['String']>;
};

export type HomeBlocksFeaturesItemsMutation = {
  title?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  image_alt?: InputMaybe<Scalars['String']>;
  btn_link?: InputMaybe<Scalars['String']>;
  btn_label?: InputMaybe<Scalars['String']>;
};

export type HomeBlocksFeaturesMutation = {
  items?: InputMaybe<Array<InputMaybe<HomeBlocksFeaturesItemsMutation>>>;
  layout?: InputMaybe<Scalars['String']>;
};

export type HomeBlocksGridGroupsItemsMutation = {
  title?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  features?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  image?: InputMaybe<Scalars['String']>;
  image_alt?: InputMaybe<Scalars['String']>;
  btn_link?: InputMaybe<Scalars['String']>;
  btn_label?: InputMaybe<Scalars['String']>;
};

export type HomeBlocksGridGroupsMutation = {
  label?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<Array<InputMaybe<HomeBlocksGridGroupsItemsMutation>>>;
};

export type HomeBlocksGridMutation = {
  groups?: InputMaybe<Array<InputMaybe<HomeBlocksGridGroupsMutation>>>;
  layout?: InputMaybe<Scalars['String']>;
};

export type HomeBlocksSpacingSwitchMutation = {
  text?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  alt_text?: InputMaybe<Scalars['String']>;
};

export type HomeBlocksSymmetrySwitchMutation = {
  image?: InputMaybe<Scalars['String']>;
  alt_text?: InputMaybe<Scalars['String']>;
};

export type HomeBlocksMutation = {
  hero?: InputMaybe<HomeBlocksHeroMutation>;
  imageText50?: InputMaybe<HomeBlocksImageText50Mutation>;
  features?: InputMaybe<HomeBlocksFeaturesMutation>;
  grid?: InputMaybe<HomeBlocksGridMutation>;
  spacingSwitch?: InputMaybe<HomeBlocksSpacingSwitchMutation>;
  symmetrySwitch?: InputMaybe<HomeBlocksSymmetrySwitchMutation>;
};

export type HomeMutation = {
  blocks?: InputMaybe<Array<InputMaybe<HomeBlocksMutation>>>;
};

export type PageMutation = {
  hero?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']>;
  imgSrc?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['String']>;
};

export type HomePartsFragment = { __typename?: 'Home', blocks?: Array<{ __typename: 'HomeBlocksHero', tagline?: string | null, headline?: string | null, text?: string | null, image?: string | null, alt_text?: string | null, btn_label?: string | null, btn_link?: string | null } | { __typename: 'HomeBlocksImageText50', template?: string | null, custom?: string | null, tagline?: string | null, headline?: string | null, headline_class?: string | null, text?: string | null, btn_label?: string | null, btn_link?: string | null, image?: string | null, image_alt?: string | null } | { __typename: 'HomeBlocksFeatures', layout?: string | null, items?: Array<{ __typename: 'HomeBlocksFeaturesItems', title?: string | null, text?: string | null, image?: string | null, image_alt?: string | null, btn_link?: string | null, btn_label?: string | null } | null> | null } | { __typename: 'HomeBlocksGrid', layout?: string | null, groups?: Array<{ __typename: 'HomeBlocksGridGroups', label?: string | null, items?: Array<{ __typename: 'HomeBlocksGridGroupsItems', title?: string | null, text?: string | null, features?: Array<string | null> | null, image?: string | null, image_alt?: string | null, btn_link?: string | null, btn_label?: string | null } | null> | null } | null> | null } | { __typename: 'HomeBlocksSpacingSwitch', text?: string | null, image?: string | null, alt_text?: string | null } | { __typename: 'HomeBlocksSymmetrySwitch', image?: string | null, alt_text?: string | null } | null> | null };

export type PagePartsFragment = { __typename?: 'Page', hero?: string | null, body?: any | null };

export type PostPartsFragment = { __typename?: 'Post', title?: string | null, imgSrc?: string | null, body?: string | null };

export type HomeQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type HomeQuery = { __typename?: 'Query', home: { __typename?: 'Home', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'HomeBlocksHero', tagline?: string | null, headline?: string | null, text?: string | null, image?: string | null, alt_text?: string | null, btn_label?: string | null, btn_link?: string | null } | { __typename: 'HomeBlocksImageText50', template?: string | null, custom?: string | null, tagline?: string | null, headline?: string | null, headline_class?: string | null, text?: string | null, btn_label?: string | null, btn_link?: string | null, image?: string | null, image_alt?: string | null } | { __typename: 'HomeBlocksFeatures', layout?: string | null, items?: Array<{ __typename: 'HomeBlocksFeaturesItems', title?: string | null, text?: string | null, image?: string | null, image_alt?: string | null, btn_link?: string | null, btn_label?: string | null } | null> | null } | { __typename: 'HomeBlocksGrid', layout?: string | null, groups?: Array<{ __typename: 'HomeBlocksGridGroups', label?: string | null, items?: Array<{ __typename: 'HomeBlocksGridGroupsItems', title?: string | null, text?: string | null, features?: Array<string | null> | null, image?: string | null, image_alt?: string | null, btn_link?: string | null, btn_label?: string | null } | null> | null } | null> | null } | { __typename: 'HomeBlocksSpacingSwitch', text?: string | null, image?: string | null, alt_text?: string | null } | { __typename: 'HomeBlocksSymmetrySwitch', image?: string | null, alt_text?: string | null } | null> | null } };

export type HomeConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<HomeFilter>;
}>;


export type HomeConnectionQuery = { __typename?: 'Query', homeConnection: { __typename?: 'HomeConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HomeConnectionEdges', cursor: string, node?: { __typename?: 'Home', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'HomeBlocksHero', tagline?: string | null, headline?: string | null, text?: string | null, image?: string | null, alt_text?: string | null, btn_label?: string | null, btn_link?: string | null } | { __typename: 'HomeBlocksImageText50', template?: string | null, custom?: string | null, tagline?: string | null, headline?: string | null, headline_class?: string | null, text?: string | null, btn_label?: string | null, btn_link?: string | null, image?: string | null, image_alt?: string | null } | { __typename: 'HomeBlocksFeatures', layout?: string | null, items?: Array<{ __typename: 'HomeBlocksFeaturesItems', title?: string | null, text?: string | null, image?: string | null, image_alt?: string | null, btn_link?: string | null, btn_label?: string | null } | null> | null } | { __typename: 'HomeBlocksGrid', layout?: string | null, groups?: Array<{ __typename: 'HomeBlocksGridGroups', label?: string | null, items?: Array<{ __typename: 'HomeBlocksGridGroupsItems', title?: string | null, text?: string | null, features?: Array<string | null> | null, image?: string | null, image_alt?: string | null, btn_link?: string | null, btn_label?: string | null } | null> | null } | null> | null } | { __typename: 'HomeBlocksSpacingSwitch', text?: string | null, image?: string | null, alt_text?: string | null } | { __typename: 'HomeBlocksSymmetrySwitch', image?: string | null, alt_text?: string | null } | null> | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename?: 'Page', id: string, hero?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename?: 'Page', id: string, hero?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename?: 'Post', id: string, title?: string | null, imgSrc?: string | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename?: 'Post', id: string, title?: string | null, imgSrc?: string | null, body?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const HomePartsFragmentDoc = gql`
    fragment HomeParts on Home {
  blocks {
    __typename
    ... on HomeBlocksHero {
      tagline
      headline
      text
      image
      alt_text
      btn_label
      btn_link
    }
    ... on HomeBlocksImageText50 {
      template
      custom
      tagline
      headline
      headline_class
      text
      btn_label
      btn_link
      image
      image_alt
    }
    ... on HomeBlocksFeatures {
      items {
        __typename
        title
        text
        image
        image_alt
        btn_link
        btn_label
      }
      layout
    }
    ... on HomeBlocksGrid {
      groups {
        __typename
        label
        items {
          __typename
          title
          text
          features
          image
          image_alt
          btn_link
          btn_label
        }
      }
      layout
    }
    ... on HomeBlocksSpacingSwitch {
      text
      image
      alt_text
    }
    ... on HomeBlocksSymmetrySwitch {
      image
      alt_text
    }
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  hero
  body
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  title
  imgSrc
  body
}
    `;
export const HomeDocument = gql`
    query home($relativePath: String!) {
  home(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HomeParts
  }
}
    ${HomePartsFragmentDoc}`;
export const HomeConnectionDocument = gql`
    query homeConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HomeFilter) {
  homeConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HomeParts
      }
    }
  }
}
    ${HomePartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      home(variables: HomeQueryVariables, options?: C): Promise<{data: HomeQuery, variables: HomeQueryVariables, query: string}> {
        return requester<{data: HomeQuery, variables: HomeQueryVariables, query: string}, HomeQueryVariables>(HomeDocument, variables, options);
      },
    homeConnection(variables?: HomeConnectionQueryVariables, options?: C): Promise<{data: HomeConnectionQuery, variables: HomeConnectionQueryVariables, query: string}> {
        return requester<{data: HomeConnectionQuery, variables: HomeConnectionQueryVariables, query: string}, HomeConnectionQueryVariables>(HomeConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  