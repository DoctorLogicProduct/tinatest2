# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  home(relativePath: String): Home!
  homeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomeFilter): HomeConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
}

input DocumentFilter {
  home: HomeFilter
  page: PageFilter
  post: PostFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Home | Page | Post

type HomeBlocksHero {
  tagline: String
  headline: String
  text: String
  image: String
  alt_text: String
  btn_label: String
  btn_link: String
}

type HomeBlocksImageText50 {
  template: String
  custom: String
  tagline: String
  headline: String
  headline_class: String
  text: String
  btn_label: String
  btn_link: String
  image: String
  image_alt: String
}

type HomeBlocksFeaturesItems {
  title: String
  text: String
  image: String
  image_alt: String
  btn_link: String
  btn_label: String
}

type HomeBlocksFeatures {
  items: [HomeBlocksFeaturesItems]
  layout: String
}

type HomeBlocksGridGroupsItems {
  title: String
  text: String
  features: [String]
  image: String
  image_alt: String
  btn_link: String
  btn_label: String
}

type HomeBlocksGridGroups {
  label: String
  items: [HomeBlocksGridGroupsItems]
}

type HomeBlocksGrid {
  groups: [HomeBlocksGridGroups]
  layout: String
}

type HomeBlocksSpacingSwitch {
  text: String
  image: String
  alt_text: String
}

type HomeBlocksSymmetrySwitch {
  image: String
  alt_text: String
}

union HomeBlocks = HomeBlocksHero | HomeBlocksImageText50 | HomeBlocksFeatures | HomeBlocksGrid | HomeBlocksSpacingSwitch | HomeBlocksSymmetrySwitch

type Home implements Node & Document {
  blocks: [HomeBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HomeBlocksHeroFilter {
  tagline: StringFilter
  headline: StringFilter
  text: StringFilter
  image: ImageFilter
  alt_text: StringFilter
  btn_label: StringFilter
  btn_link: StringFilter
}

input HomeBlocksImageText50Filter {
  template: StringFilter
  custom: StringFilter
  tagline: StringFilter
  headline: StringFilter
  headline_class: StringFilter
  text: StringFilter
  btn_label: StringFilter
  btn_link: StringFilter
  image: ImageFilter
  image_alt: StringFilter
}

input HomeBlocksFeaturesItemsFilter {
  title: StringFilter
  text: StringFilter
  image: ImageFilter
  image_alt: StringFilter
  btn_link: StringFilter
  btn_label: StringFilter
}

input HomeBlocksFeaturesFilter {
  items: HomeBlocksFeaturesItemsFilter
  layout: StringFilter
}

input HomeBlocksGridGroupsItemsFilter {
  title: StringFilter
  text: StringFilter
  features: StringFilter
  image: ImageFilter
  image_alt: StringFilter
  btn_link: StringFilter
  btn_label: StringFilter
}

input HomeBlocksGridGroupsFilter {
  label: StringFilter
  items: HomeBlocksGridGroupsItemsFilter
}

input HomeBlocksGridFilter {
  groups: HomeBlocksGridGroupsFilter
  layout: StringFilter
}

input HomeBlocksSpacingSwitchFilter {
  text: StringFilter
  image: ImageFilter
  alt_text: StringFilter
}

input HomeBlocksSymmetrySwitchFilter {
  image: ImageFilter
  alt_text: StringFilter
}

input HomeBlocksFilter {
  hero: HomeBlocksHeroFilter
  imageText50: HomeBlocksImageText50Filter
  features: HomeBlocksFeaturesFilter
  grid: HomeBlocksGridFilter
  spacingSwitch: HomeBlocksSpacingSwitchFilter
  symmetrySwitch: HomeBlocksSymmetrySwitchFilter
}

input HomeFilter {
  blocks: HomeBlocksFilter
}

type HomeConnectionEdges {
  cursor: String!
  node: Home
}

type HomeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type Page implements Node & Document {
  hero: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageFilter {
  hero: ImageFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Post implements Node & Document {
  title: String
  imgSrc: String
  body: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostFilter {
  title: StringFilter
  imgSrc: ImageFilter
  body: StringFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateHome(relativePath: String!, params: HomeMutation!): Home!
  createHome(relativePath: String!, params: HomeMutation!): Home!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentMutation {
  home: HomeMutation
  page: PageMutation
  post: PostMutation
}

input HomeBlocksHeroMutation {
  tagline: String
  headline: String
  text: String
  image: String
  alt_text: String
  btn_label: String
  btn_link: String
}

input HomeBlocksImageText50Mutation {
  template: String
  custom: String
  tagline: String
  headline: String
  headline_class: String
  text: String
  btn_label: String
  btn_link: String
  image: String
  image_alt: String
}

input HomeBlocksFeaturesItemsMutation {
  title: String
  text: String
  image: String
  image_alt: String
  btn_link: String
  btn_label: String
}

input HomeBlocksFeaturesMutation {
  items: [HomeBlocksFeaturesItemsMutation]
  layout: String
}

input HomeBlocksGridGroupsItemsMutation {
  title: String
  text: String
  features: [String]
  image: String
  image_alt: String
  btn_link: String
  btn_label: String
}

input HomeBlocksGridGroupsMutation {
  label: String
  items: [HomeBlocksGridGroupsItemsMutation]
}

input HomeBlocksGridMutation {
  groups: [HomeBlocksGridGroupsMutation]
  layout: String
}

input HomeBlocksSpacingSwitchMutation {
  text: String
  image: String
  alt_text: String
}

input HomeBlocksSymmetrySwitchMutation {
  image: String
  alt_text: String
}

input HomeBlocksMutation {
  hero: HomeBlocksHeroMutation
  imageText50: HomeBlocksImageText50Mutation
  features: HomeBlocksFeaturesMutation
  grid: HomeBlocksGridMutation
  spacingSwitch: HomeBlocksSpacingSwitchMutation
  symmetrySwitch: HomeBlocksSymmetrySwitchMutation
}

input HomeMutation {
  blocks: [HomeBlocksMutation]
}

input PageMutation {
  hero: String
  body: JSON
}

input PostMutation {
  title: String
  imgSrc: String
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  